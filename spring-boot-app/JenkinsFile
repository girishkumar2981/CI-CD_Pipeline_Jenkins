pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/girishkumar2981/CI-CD_Pipeline_Jenkins.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://18.188.16.230:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('OWASP Dependency check') {
      steps {
          dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DC'
          dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
      }
    }  
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "girishkumar2981/cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Deploy to Nexus Repository') {
        steps{
           withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk11', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
            
              }
            }
          }
  }
}
